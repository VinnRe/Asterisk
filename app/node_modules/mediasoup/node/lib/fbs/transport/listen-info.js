"use strict";
// automatically generated by the FlatBuffers compiler, do not modify
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListenInfoT = exports.ListenInfo = void 0;
const flatbuffers = require("flatbuffers");
const protocol_1 = require("../../fbs/transport/protocol");
class ListenInfo {
    bb = null;
    bb_pos = 0;
    __init(i, bb) {
        this.bb_pos = i;
        this.bb = bb;
        return this;
    }
    static getRootAsListenInfo(bb, obj) {
        return (obj || new ListenInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    static getSizePrefixedRootAsListenInfo(bb, obj) {
        bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
        return (obj || new ListenInfo()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
    }
    protocol() {
        const offset = this.bb.__offset(this.bb_pos, 4);
        return offset ? this.bb.readUint8(this.bb_pos + offset) : protocol_1.Protocol.UDP;
    }
    ip(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 6);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    announcedIp(optionalEncoding) {
        const offset = this.bb.__offset(this.bb_pos, 8);
        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
    }
    port() {
        const offset = this.bb.__offset(this.bb_pos, 10);
        return offset ? this.bb.readUint16(this.bb_pos + offset) : 0;
    }
    sendBufferSize() {
        const offset = this.bb.__offset(this.bb_pos, 12);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    recvBufferSize() {
        const offset = this.bb.__offset(this.bb_pos, 14);
        return offset ? this.bb.readUint32(this.bb_pos + offset) : 0;
    }
    static startListenInfo(builder) {
        builder.startObject(6);
    }
    static addProtocol(builder, protocol) {
        builder.addFieldInt8(0, protocol, protocol_1.Protocol.UDP);
    }
    static addIp(builder, ipOffset) {
        builder.addFieldOffset(1, ipOffset, 0);
    }
    static addAnnouncedIp(builder, announcedIpOffset) {
        builder.addFieldOffset(2, announcedIpOffset, 0);
    }
    static addPort(builder, port) {
        builder.addFieldInt16(3, port, 0);
    }
    static addSendBufferSize(builder, sendBufferSize) {
        builder.addFieldInt32(4, sendBufferSize, 0);
    }
    static addRecvBufferSize(builder, recvBufferSize) {
        builder.addFieldInt32(5, recvBufferSize, 0);
    }
    static endListenInfo(builder) {
        const offset = builder.endObject();
        builder.requiredField(offset, 6); // ip
        return offset;
    }
    static createListenInfo(builder, protocol, ipOffset, announcedIpOffset, port, sendBufferSize, recvBufferSize) {
        ListenInfo.startListenInfo(builder);
        ListenInfo.addProtocol(builder, protocol);
        ListenInfo.addIp(builder, ipOffset);
        ListenInfo.addAnnouncedIp(builder, announcedIpOffset);
        ListenInfo.addPort(builder, port);
        ListenInfo.addSendBufferSize(builder, sendBufferSize);
        ListenInfo.addRecvBufferSize(builder, recvBufferSize);
        return ListenInfo.endListenInfo(builder);
    }
    unpack() {
        return new ListenInfoT(this.protocol(), this.ip(), this.announcedIp(), this.port(), this.sendBufferSize(), this.recvBufferSize());
    }
    unpackTo(_o) {
        _o.protocol = this.protocol();
        _o.ip = this.ip();
        _o.announcedIp = this.announcedIp();
        _o.port = this.port();
        _o.sendBufferSize = this.sendBufferSize();
        _o.recvBufferSize = this.recvBufferSize();
    }
}
exports.ListenInfo = ListenInfo;
class ListenInfoT {
    protocol;
    ip;
    announcedIp;
    port;
    sendBufferSize;
    recvBufferSize;
    constructor(protocol = protocol_1.Protocol.UDP, ip = null, announcedIp = null, port = 0, sendBufferSize = 0, recvBufferSize = 0) {
        this.protocol = protocol;
        this.ip = ip;
        this.announcedIp = announcedIp;
        this.port = port;
        this.sendBufferSize = sendBufferSize;
        this.recvBufferSize = recvBufferSize;
    }
    pack(builder) {
        const ip = (this.ip !== null ? builder.createString(this.ip) : 0);
        const announcedIp = (this.announcedIp !== null ? builder.createString(this.announcedIp) : 0);
        return ListenInfo.createListenInfo(builder, this.protocol, ip, announcedIp, this.port, this.sendBufferSize, this.recvBufferSize);
    }
}
exports.ListenInfoT = ListenInfoT;
